{"version":3,"file":"static/js/333.ff26a3d3.chunk.js","mappings":"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","sources":["components/pages/ErrorPage.js","components/pages/SingleComicPage.js","components/skeleton/Skeleton.js","components/hooks/httpHook.js","services/MarvelService.js"],"sourcesContent":["import { Link } from 'react-router-dom';\r\nimport errorImg from '../../resources/img/error_img.png'; // Замените на путь к вашей картинке\r\n\r\nconst ErrorPage = () => {\r\n    return (\r\n        <div style={styles.container}>\r\n            <img src={errorImg} alt=\"404 Error\" style={styles.image} />\r\n            <h1 style={styles.title}>Oops! Page not found</h1>\r\n            <p style={styles.text}>We can't seem to find the page you're looking for.</p>\r\n            <Link to=\"/\" style={styles.link}>Go back to the homepage</Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst styles = {\r\n    container: {\r\n        textAlign: 'center',\r\n        padding: '50px'\r\n    },\r\n    image: {\r\n        width: '300px',\r\n        marginBottom: '20px'\r\n    },\r\n    title: {\r\n        fontSize: '2em',\r\n        margin: '20px 0'\r\n    },\r\n    text: {\r\n        fontSize: '1.2em',\r\n        marginBottom: '30px'\r\n    },\r\n    link: {\r\n        textDecoration: 'none',\r\n        color: '#007BFF',\r\n        fontSize: '1.5em',\r\n    }\r\n};\r\n\r\nexport default ErrorPage;","import { useParams, Link } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport './singleComicPage.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../Spinner';\r\nimport Skeleton from '../skeleton/Skeleton';\r\nimport ErrorPage from './ErrorPage';\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId])\r\n\r\n    const updateComic = () => {\r\n        // Метод который обновляет данные про персонажа\r\n        clearError();\r\n        getComic(comicId)\r\n        .then(onComicLoaded)\r\n    };\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    };\r\n\r\n    const skeleton = comic || loading || error ? null : <Skeleton></Skeleton>;\r\n    const errorMessage = error ? <ErrorPage></ErrorPage> : null;\r\n    const loadingSpinner = loading ? <Spinner></Spinner> : null;\r\n    const content = !(error || loading || !comic) ? (<RenderSingleComic comic={comic}></RenderSingleComic>) : null;\r\n\r\n    return (\r\n        <>\r\n            {content}\r\n            {errorMessage}\r\n            {loadingSpinner}\r\n            {skeleton}\r\n        </>\r\n    )\r\n}\r\n\r\nconst RenderSingleComic = ({comic}) => {\r\n    const {title, description, thumbnail, price, language, pageCount} = comic;\r\n    console.log(title)\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">Page count: {pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">Price: {price}$</div>\r\n            </div>\r\n            <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [error, setError] = useState(null); // Исправлено значение по умолчанию\r\n    const [loading, setLoading] = useState(false); // Исправлено начальное значение\r\n\r\n    // Объявляем request снаружи useEffect\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Не правильный запрос к ${url}, статус: ${response.status}`); // Используем response.status\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n       \r\n    }, []); // Зависимости пусты, так как у нас нет динамически изменяющихся переменных\r\n\r\n    // Функция для очистки ошибок\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError };\r\n};","import { useHttp } from \"../components/hooks/httpHook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=9eea50e05b101c3590f1ec3995f0c977';\r\n    const _baseOffset = 55;\r\n\r\n    const getItemCharacter = async (offset = _baseOffset) => { \r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        // Применяем map для трансформации каждого персонажа\r\n        console.log(res)\r\n        return res.data.results.map(_transformCharacterItem);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        let res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        console.log('Компонент срендерился')\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterItemList = async (offset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        console.log(res);\r\n        return res.data.results.map(_transformCharacterItemList);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        console.log(res);\r\n        return _transformComic(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        // Использовав char как аргумент мы передаем в него путь использования нашего обьекта, и получается resource() это ссылка и от этой ссылки мы получаем путь res.data.results[первый массив] и name\r\n        return {\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0],\r\n            wiki: char.urls[1],\r\n            comics: char.comics.items,\r\n            resourceUrl: char.resourceURI\r\n        }\r\n    }\r\n\r\n    const _transformCharacterItem = (char) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        return {\r\n            name: char.name,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            id: char.id\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comics) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        return {\r\n            title: comics.series.name,\r\n            description: comics.description || 'Нет названия',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            id: comics.id,\r\n            pageCount: comics.pageCount ? `${comics.pageCount}` : 'Нет информации о количестве страниц',\r\n            price: comics.prices[0].price,\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    const _transformCharacterItemList = (char) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        return {\r\n            name: char.series.name,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            id: char.id,\r\n            price: char.prices[0].price\r\n        }\r\n    }\r\n\r\n    return {loading, error, getCharacter, getItemCharacter, clearError, getCharacterItemList, getComic}; // Деструктуризируем наш хук и теперь можем использовать загрузку, ошибку и функции как обычные функции\r\n\r\n}\r\n\r\nexport default useMarvelService;"],"names":["styles","container","textAlign","padding","image","width","marginBottom","title","fontSize","margin","text","link","textDecoration","color","ErrorPage","_jsxs","style","children","_jsx","src","errorImg","alt","Link","to","RenderSingleComic","_ref","comic","description","thumbnail","price","language","pageCount","console","log","className","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","skeleton","Skeleton","errorMessage","loadingSpinner","Spinner","content","_Fragment","request","useHttp","setError","setLoading","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","path","extension","homepage","urls","wiki","comics","items","resourceUrl","resourceURI","_transformCharacterItem","id","_transformComic","series","prices","textObjects","_transformCharacterItemList","getCharacter","res","results","getItemCharacter","offset","map","getCharacterItemList"],"sourceRoot":""}
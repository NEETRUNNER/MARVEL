{"version":3,"file":"static/js/11.7d34854e.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/comics/Comics.js","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","components/hooks/httpHook.js","services/MarvelService.js"],"sourcesContent":["import img from '../errorMessage/error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'></img>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './comics.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../Spinner';\r\n\r\nconst Comics = () => {\r\n    const [chars, setChars] = useState([]);\r\n    const [offset, setOffset] = useState(210);\r\n\r\n    const { loading, error, getCharacterItemList } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        getCharacterItemList();\r\n        onRequest();\r\n    }, []);\r\n\r\n    const onRequest = () => {\r\n        // Метод отправляет запрос и обновляет данные персонажей\r\n        getCharacterItemList(offset) // Этот метод возвращает промис, который асинхронно получает данные персонажей с API.\r\n            .then(newCharList); // Так как достаем метод который является промисом, можем использовать then catch, если промис разрешается данные передаются в newCharList\r\n    };\r\n\r\n    const newCharList = (newChar) => {\r\n        setChars((chars) => [...chars, ...newChar]);\r\n        setOffset((offset) => offset + 8);\r\n    };\r\n\r\n    const items = renderItemList(chars);\r\n    console.log(chars);\r\n    const contentList = items ? items : null;\r\n    const loadCharList = loading ? <Spinner></Spinner> : null;\r\n    const errorListItem = error ? <ErrorMessage></ErrorMessage> : null;\r\n\r\n    const hideBtn = {\r\n        display: 'none',\r\n    };\r\n\r\n    const openBtn = {\r\n        display: 'inline-block',\r\n    };\r\n\r\n    return (\r\n        <div className=\"comicsPage\">\r\n            <div className=\"comicsPage-list\">\r\n                {contentList}\r\n                {errorListItem}\r\n                {loadCharList}\r\n            </div>\r\n            <button\r\n                style={loading ? hideBtn : openBtn}\r\n                disabled={loading}\r\n                onClick={onRequest}\r\n                className=\"comicsPage-banner__button\"\r\n            >\r\n                Load more\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst renderItemList = (arr) => {\r\n    const itemsList = arr.map((item, i) => {\r\n        if (!arr) {\r\n            return null; // Если char undefined, не рендерим ничего\r\n        }\r\n\r\n        return (\r\n            <Link to={`/comics/${item.id}`}>\r\n                <li className=\"charList__item\" key={i}>\r\n                    <img\r\n                        src={item.thumbnail}\r\n                        alt={item.name}\r\n                        className=\"charList__img\"\r\n                    />\r\n                    <div className=\"charList__name\">{item.name}</div>\r\n                    <div className=\"charList__price\">{item.price}$</div>\r\n                </li>\r\n            </Link>\r\n        );\r\n    });\r\n\r\n    return <ul className=\"charList\">{itemsList}</ul>;\r\n};\r\n\r\nexport default Comics;\r\n\r\nfunction noOdds(values) {\r\n    return values.filter((value) => value % 2 == 0);\r\n}\r\n\r\n\r\nconsole.log(noOdds([1, 2, 3, 4, 5]))","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import Comics from '../comics/Comics';\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner></AppBanner>\r\n            <Comics></Comics>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [error, setError] = useState(null); // Исправлено значение по умолчанию\r\n    const [loading, setLoading] = useState(false); // Исправлено начальное значение\r\n\r\n    // Объявляем request снаружи useEffect\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Не правильный запрос к ${url}, статус: ${response.status}`); // Используем response.status\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n       \r\n    }, []); // Зависимости пусты, так как у нас нет динамически изменяющихся переменных\r\n\r\n    // Функция для очистки ошибок\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError };\r\n};","import { useHttp } from \"../components/hooks/httpHook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=9eea50e05b101c3590f1ec3995f0c977';\r\n    const _baseOffset = 55;\r\n\r\n    const getItemCharacter = async (offset = _baseOffset) => { \r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        // Применяем map для трансформации каждого персонажа\r\n        console.log(res)\r\n        return res.data.results.map(_transformCharacterItem);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        let res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        console.log('Компонент срендерился')\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterItemList = async (offset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        console.log(res);\r\n        return res.data.results.map(_transformCharacterItemList);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        console.log(res);\r\n        return _transformComic(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        // Использовав char как аргумент мы передаем в него путь использования нашего обьекта, и получается resource() это ссылка и от этой ссылки мы получаем путь res.data.results[первый массив] и name\r\n        return {\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0],\r\n            wiki: char.urls[1],\r\n            comics: char.comics.items,\r\n            resourceUrl: char.resourceURI\r\n        }\r\n    }\r\n\r\n    const _transformCharacterItem = (char) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        return {\r\n            name: char.name,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            id: char.id\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comics) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        return {\r\n            title: comics.series.name,\r\n            description: comics.description || 'Нет названия',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            id: comics.id,\r\n            pageCount: comics.pageCount ? `${comics.pageCount}` : 'Нет информации о количестве страниц',\r\n            price: comics.prices[0].price,\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    const _transformCharacterItemList = (char) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        return {\r\n            name: char.series.name,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            id: char.id,\r\n            price: char.prices[0].price\r\n        }\r\n    }\r\n\r\n    return {loading, error, getCharacter, getItemCharacter, clearError, getCharacterItemList, getComic}; // Деструктуризируем наш хук и теперь можем использовать загрузку, ошибку и функции как обычные функции\r\n\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","renderItemList","arr","itemsList","map","item","i","Link","to","concat","id","children","_jsxs","className","thumbnail","name","price","Comics","chars","setChars","useState","offset","setOffset","loading","error","getCharacterItemList","useMarvelService","useEffect","onRequest","then","newCharList","newChar","items","console","log","contentList","loadCharList","Spinner","errorListItem","disabled","onClick","filter","value","AppBanner","avengers","avengersLogo","ComicsPage","_Fragment","request","clearError","useHttp","setError","setLoading","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","description","path","extension","homepage","urls","wiki","comics","resourceUrl","resourceURI","_transformCharacterItem","_transformComic","title","series","pageCount","prices","language","textObjects","_transformCharacterItemList","getCharacter","res","results","getItemCharacter","getComic"],"sourceRoot":""}
{"version":3,"file":"static/js/276.111dd74b.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","components/skeleton/Skeleton.js","components/hooks/httpHook.js","services/MarvelService.js"],"sourcesContent":["import img from '../errorMessage/error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'></img>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\n\nimport './randomChar.scss';     \nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacter, clearError} = useMarvelService(); // Является экземпляром класса MarvelService, который используется для взаимодействия с API Marvel. Он предоставляет методы для получения данных о персонажах и другой информации через сетевые запросы.\n\n    const onCharLoaded = (char) => { // Метод позволяет загружать характеристику и переводит загрузку в false\n        setChar(char)\n\n        // Если описание пустое, задаем значение по умолчанию\n        if (char.description.length === 0) {\n            char.description = `Нет описания для данного персонажа`;\n        } else if (char.description.length > 210) {\n            // Обрезаем описание и добавляем троеточие, если длина больше 180\n            char.description = char.description.slice(0, 210) + '...';\n        }\n        console.log('Загрузка')\n    }\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const updateChar = () => { // Обновляет персонажа в RandomChar\n        clearError();\n        const min = 1011136;\n        const max = 1011334;\n        const id = Math.floor(Math.random() * (max - min + 1)) + min;\n        getCharacter(id) // Является промисом поэтому можем использовать цепочку then\n        .then(onCharLoaded) // Загружает данные в обьект char\n    };\n\n    const handleButtonClick = (e) => {\n        updateChar(); // Вызов метода\n        e.preventDefault();\n    };\n\n        const errorMessage = error ? <ErrorMessage></ErrorMessage> : null;\n        const spinner = loading ? <Spinner></Spinner> : null;\n        const content = !(loading || error) ? <RenderRandomChar char={char}/> : null;\n\n        return (\n                <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!\n                        <br />\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">Or choose another one</p>\n                    <button onClick={e => {handleButtonClick(e)}} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img\n                        src={mjolnir}\n                        alt=\"mjolnir\"\n                        className=\"randomchar__decoration\"\n                    />\n                </div>\n            </div>\n        )\n}\n\n// Функция\nconst RenderRandomChar = ({char}) => {\n\n    const style = {\n        objectFit: 'fill'\n    }\n\n    const {name, thumbnail, homepage, wiki, description} = char;\n\n    return (\n        <div className=\"randomchar__block\">\n                    <img style={style}\n                        src={thumbnail}\n                        alt=\"Random character\"\n                        className=\"randomchar__img\"\n                    />\n                    <div className=\"randomchar__info\">\n                        <p className=\"randomchar__name\">{name}</p>\n                        <p className=\"randomchar__descr\">{description}</p>\n                        <div className=\"randomchar__btns\">\n                            <a\n                            href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect } from 'react';\n\nimport './charList.scss';\nimport Spinner from '../Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nconst CharList = ({onCharSelected}) => { // Пропсы в функциональные компоненты передаются в аргументе компонента\n    const {loading, error, getItemCharacter} = useMarvelService();\n\n    const [chars, setChars] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [activeCharId, setActiveCharId] = useState(null);\n    const [scroll, setScroll] = useState(false);\n    const [charEnded, setCharEnded] = useState(false);\n\n    // Хук для монтирования\n    useEffect(() => {\n        onRequestAndUpdateAllChar(offset, true); //  Этот хук срабатывает только один раз — при монтировании компонента. Пустой массив зависимостей ([]) означает, что эта логика выполняется только при первом рендере. Это предотвращает повторную загрузку персонажей при каждом изменении состояния компонента, что могло бы вызвать лишние запросы к API и постоянное обновление карточек.\n        setNewItemLoading(true)\n    }, []) // Если будет пустой массив то не будет автодозагрузки персонажей\n\n    useEffect(() => { // Этот хук следит за изменениями значения offset, которое используется для подгрузки следующих персонажей. Каждый раз, когда offset изменяется (например, при клике на кнопку \"Load more\" или при скролле страницы), хук снова добавляет обработчик для отслеживания скролла.\n\n        /* window.addEventListener('scroll', handleScroll) */\n        console.log('Компонент рендерится')\n\n        return () => {\n            /* window.removeEventListener('scroll', handleScroll) */\n        }\n    }, [offset])\n\n    // Методы для пагинации данных\n    const onRequestAndUpdateAllChar = (offset, initial) => { // Метод отправляет запрос и обновляет данные персонажей\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getItemCharacter(offset) // Этот метод возвращает промис, который асинхронно получает данные персонажей с API.\n        .then(newCharList) // Так как достаем метод который является промисом, можем использовать then catch, если промис разрешается данные передаются в newCharList\n    }\n\n    const newCharList = (newChar) => { // Метод который создаёт новых персонажей и изменяет стейт для offset и chars\n\n        let ended = false;\n        if (newChar.length  < 9) { // Здесь мы проверяем что если длинна массива который нам приходит меньше 9, то меняем сейт charEnder в true\n            ended = true;\n        }\n\n        setChars(chars => [...chars, ...newChar])\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setScroll(scroll => true);\n        setCharEnded(charEnded => ended)\n    }    \n\n    const handleScroll = (e) => { // Метод который позволяет получить конечную высоту прокрутки overflow\n        const {clientHeight, scrollHeight, scrollTop} = document.documentElement;\n        e.preventDefault()\n\n        if (scrollTop + clientHeight >= scrollHeight && (scroll && !charEnded)) {\n            console.log('Произошла конечная прокрутка')\n            setNewItemLoading(true)\n            onRequestAndUpdateAllChar(offset);\n        }\n    }\n\n    const itemCharState = (id) => { // Метод устонавливает в стейт activeCharId новый id\n        setActiveCharId(id)\n        console.log(id)\n    }\n\n        const items = renderChar(chars, onCharSelected, activeCharId, itemCharState);\n        console.log(items)\n\n        const loadChar = loading && !newItemLoading ? <Spinner></Spinner> : null;\n        const errorItem = error ? <ErrorMessage></ErrorMessage> : null;\n        // Показать спиннеры для всех карточек при загрузке\n        \n        return (\n            <div className=\"char__list\">\n                    {loadChar}\n                    {errorItem}\n                    {items}\n                <button disabled={newItemLoading} style={{'display': charEnded ? 'none' : 'block'}} onClick={() => onRequestAndUpdateAllChar(offset)} className=\"button button__main button__long\">\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\n\nconst renderChar = (arr, onCharSelected, activeCharId, itemCharState) => { // Переделали в функцию добавили в аргументы второй аргумент onCharSelected из App получили мы его с помощью записи в this.props как пропс \n    const items = arr.map((item) => {\n        const imgStyle = {\n            objectFit: 'fill',\n        }\n\n        let boxStyle = {\n            boxShadow: '0px 5px 20px 0px rgb(159, 0, 19)',\n            transition: '0.5s all',\n            paddingTop: '10px'\n        }\n\n        const textStyle = {\n            fontSize: '18px'\n        }\n    \n        if (!arr) {\n            return null; // Если char undefined, не рендерим ничего\n        }\n\n        return (\n            <li style={activeCharId === item.id ? boxStyle : null} \n            onClick={() => {\n                onCharSelected(item.id); \n                itemCharState(item.id);\n                console.log(activeCharId)\n            }} \n            className=\"char__item\" key={item.id}> \n                <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                <div style={textStyle} className=\"char__name\">{item.name}</div>\n            </li>\n        )\n    });\n\n    return ( // Поместили всё так чтобы char__grid остался оболочкой для правильности стилей\n        <ul className=\"char__grid\">\n            {items}\n        </ul>\n    )\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './charInfo.scss';\nimport Spinner from '../Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\n\nconst CharInfo = ({charId}) => {\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    const [char, setChar] = useState(null);\n\n    useEffect(() => {\n        if (charId) {\n            updateCharInfo();\n        }\n    }, [charId])\n\n    const updateCharInfo = () => {\n        // Метод который обновляет данные про персонажа\n        if (!charId) {\n            return;\n        }\n        \n        clearError();\n        getCharacter(charId)\n        .then(onCharLoaded)\n    };\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n        const skeleton = char || loading || error ? null : <Skeleton></Skeleton>;\n        const errorMessage = error ? <ErrorMessage></ErrorMessage> : null;\n        const loadingSpinner = loading ? <Spinner></Spinner> : null;\n        const content = !(error || loading || !char) ? (<RenderInfo char={char}></RenderInfo>) : null;\n\n        return (\n            <div className=\"char__info\">\n                {loadingSpinner}\n                {skeleton}\n                {errorMessage}\n                {content}\n            </div>\n        );\n}\n\nconst RenderInfo = ({ char }) => {\n    const imgStyle = {\n        objectFit: 'fill',\n    };\n\n    const { thumbnail, name, homepage, wiki, description, comics } = char;\n    console.log(char);\n    console.log(comics);\n\n    // Определяем, что рендерить в зависимости от длины массива comics\n    const comicsList =\n        comics.length > 0 ? (comics.slice(0, 10).map((item, i) => {     \n            let comicsFromCharInfo = item.resourceURI.replace(/\\D/g, '').slice(1);\n            console.log(comicsFromCharInfo)\n            return ( // Добавляем явный return для возврата JSX\n                <Link to={`/comics/${comicsFromCharInfo}`} key={i} className=\"char__comics-item\">\n                    {item.name}\n                </Link>\n            );\n        })) : (<ErrorMessage></ErrorMessage>); // Если массив пустой\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img style={imgStyle} src={thumbnail} alt={name} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">{comicsList}</ul>\n        </>\n    );\n};\n\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch (error, info) {\r\n        console.log(error, info)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render () {\r\n        if (this.state.error === true) {\r\n            return  <ErrorMessage></ErrorMessage>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\n\r\nimport React from 'react';\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        // Создали метод который будет устанавливать состояние для selectedChar и будет добавлять туда аргумент id\r\n        setSelectedChar(id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n\r\n               <div className=\"char__content\">\r\n\r\n                    <ErrorBoundary>\r\n                        <CharList onCharSelected={onCharSelected} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n\r\n                </div>\r\n                    <img\r\n                        className=\"bg-decoration\"\r\n                        src={decoration}\r\n                        alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [error, setError] = useState(null); // Исправлено значение по умолчанию\r\n    const [loading, setLoading] = useState(false); // Исправлено начальное значение\r\n\r\n    // Объявляем request снаружи useEffect\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Не правильный запрос к ${url}, статус: ${response.status}`); // Используем response.status\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n       \r\n    }, []); // Зависимости пусты, так как у нас нет динамически изменяющихся переменных\r\n\r\n    // Функция для очистки ошибок\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError };\r\n};","import { useHttp } from \"../components/hooks/httpHook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=9eea50e05b101c3590f1ec3995f0c977';\r\n    const _baseOffset = 55;\r\n\r\n    const getItemCharacter = async (offset = _baseOffset) => { \r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        // Применяем map для трансформации каждого персонажа\r\n        console.log(res)\r\n        return res.data.results.map(_transformCharacterItem);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        let res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        console.log('Компонент срендерился')\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterItemList = async (offset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        console.log(res);\r\n        return res.data.results.map(_transformCharacterItemList);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        console.log(res);\r\n        return _transformComic(res.data.results[0])\r\n    }\r\n\r\n    const _transformCharacter = (char) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        // Использовав char как аргумент мы передаем в него путь использования нашего обьекта, и получается resource() это ссылка и от этой ссылки мы получаем путь res.data.results[первый массив] и name\r\n        return {\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0],\r\n            wiki: char.urls[1],\r\n            comics: char.comics.items,\r\n            resourceUrl: char.resourceURI\r\n        }\r\n    }\r\n\r\n    const _transformCharacterItem = (char) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        return {\r\n            name: char.name,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            id: char.id\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comics) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        return {\r\n            title: comics.series.name,\r\n            description: comics.description || 'Нет названия',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            id: comics.id,\r\n            pageCount: comics.pageCount ? `${comics.pageCount}` : 'Нет информации о количестве страниц',\r\n            price: comics.prices[0].price,\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    const _transformCharacterItemList = (char) => { // Нижний черточка ставится для того чтобы понимать, что эту функцию нельзя трогать\r\n        return {\r\n            name: char.series.name,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            id: char.id,\r\n            price: char.prices[0].price\r\n        }\r\n    }\r\n\r\n    return {loading, error, getCharacter, getItemCharacter, clearError, getCharacterItemList, getComic}; // Деструктуризируем наш хук и теперь можем использовать загрузку, ошибку и функции как обычные функции\r\n\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","RenderRandomChar","_ref","char","name","thumbnail","homepage","wiki","description","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","onCharLoaded","length","slice","console","log","useEffect","updateChar","min","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","e","preventDefault","handleButtonClick","mjolnir","renderChar","arr","onCharSelected","activeCharId","itemCharState","items","map","item","boxShadow","transition","paddingTop","fontSize","getItemCharacter","chars","setChars","newItemLoading","setNewItemLoading","offset","setOffset","setActiveCharId","scroll","setScroll","charEnded","setCharEnded","onRequestAndUpdateAllChar","initial","newCharList","newChar","ended","loadChar","errorItem","disabled","RenderInfo","_ref2","comics","comicsList","i","comicsFromCharInfo","resourceURI","replace","Link","to","concat","_Fragment","charId","updateCharInfo","skeleton","Skeleton","loadingSpinner","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","info","this","setState","render","props","MainPage","selectedChar","setSelectedChar","CharList","CharInfo","decoration","request","useHttp","setError","setLoading","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_transformCharacter","path","extension","urls","resourceUrl","_transformCharacterItem","_transformComic","title","series","pageCount","price","prices","language","textObjects","_transformCharacterItemList","res","results","getCharacterItemList","getComic"],"sourceRoot":""}